from Bio.Blast.Applications import NcbiblastnCommandline
from Bio.Blast import NCBIXML


def blast_primer(query_address: str, db_address: str, out_address1: str, evalue=0.001, identity=18):
    blastn_cline = NcbiblastnCommandline(query=query_address, db=db_address, evalue=0.1, outfmt=5, out=out_address1,
                                         task='blastn-short', dust='no')
    stout, stderr = blastn_cline()
    result_handle = open(out_address1)
    blast_record = NCBIXML.read(result_handle)
    E_VALUE_THRESH = evalue  # set E_value or other parameter and judge if exist
    Identities = identity  # set identity for alignments,for primer design:length of primer-2 is recommended
    count = 0  # count number of blast hits
    name_list = []
    for alignment in blast_record.alignments:
        for hsp in alignment.hsps:
            if hsp.expect <= E_VALUE_THRESH and hsp.identities >= Identities:
                count += 1
                name_list.append(alignment.title)
                print('****Alignment****')
                print('sequence:', alignment.title)
                print('length:', alignment.length)
                print('identity:', hsp.identities)
                print('e value:', hsp.expect)
                print(hsp.query[0:75] + '...')
                print(hsp.match[0:75] + '...')
                print(hsp.sbjct[0:75] + '...')
    print(count, ' similar sequence found.')
    return count, name_list
