from PrimerBlast_Tools import *

gene_id = {  
    'db': 'nucleotide',
    'id': '818614',
    'rettype': 'gb',
    'retmode': 'text'
}
email = 'sample@email.com'

record, target_seq = get_target(email, gene_id)

gene_name = 'gi_818614'
out_address = 'sample_address'
db_address = 'sample_address/database.fa'
evalue = 0.00001
identity = 18
print('Parameters saved...')

# Set parameters: name,seq, include region etc.

seq_args = {  
    'SEQUENCE_ID': gene_name,
    'SEQUENCE_TEMPLATE': target_seq,
    'SEQUENCE_INCLUDED_REGION': [0, len(target_seq)],
    'SEQUENCE_TARGET': [],
    'SEQUENCE_EXCLUDED_REGION': []
}

global_args = {
    'PRIMER_OPT_SIZE': 20,
    'PRIMER_PICK_INTERNAL_OLIGO': 1,
    'PRIMER_INTERNAL_MAX_SELF_END': 8,
    'PRIMER_MIN_SIZE': 18,
    'PRIMER_MAX_SIZE': 25,
    'PRIMER_OPT_TM': 60.0,
    'PRIMER_MIN_TM': 55.0,
    'PRIMER_MAX_TM': 65.0,
    'PRIMER_MIN_GC': 20.0,
    'PRIMER_MAX_GC': 80.0,
    'PRIMER_MAX_POLY_X': 100,
    'PRIMER_INTERNAL_MAX_POLY_X': 100,
    'PRIMER_SALT_MONOVALENT': 50.0,
    'PRIMER_DNA_CONC': 50.0,
    'PRIMER_MAX_NS_ACCEPTED': 0,
    'PRIMER_MAX_SELF_ANY': 12,
    'PRIMER_MAX_SELF_END': 8,
    'PRIMER_PAIR_MAX_COMPL_ANY': 12,
    'PRIMER_PAIR_MAX_COMPL_END': 8,
    'PRIMER_PRODUCT_SIZE_RANGE': [[75, 100], [100, 125], [125, 150], [150, 175], [175, 200]],
}
print('Start designing primers for ' + gene_name)
primer_df = design_primer(seq_args, global_args, out_address + 'test_Primer_df.txt')
# To get all primer pairs in the form of dataframe
primer_list = extract_pairs(out_address + 'test_Primer_df.txt')
# Turn dataframe into list of primer pairs
print('Primer design succeeded... start confirming')
list_1 = []

for pair in primer_list:
    forward = pair[0]
    tmp_f = open(out_address + "tmp_f.fasta", "w")
    tmp_f.write("%s" % forward)
    tmp_f.close()
    reverse = pair[1]
    tmp_r = open(out_address + "tmp_r.fasta", "w")
    tmp_r.write("%s" % reverse)
    tmp_r.close()
    f, f_n = blast_primer(out_address + "tmp_f.fasta", db_address=db_address, out_address1=out_address + 'test.xml',
                          evalue=evalue, identity=identity)
    r, r_n = blast_primer(out_address + "tmp_r.fasta", db_address=db_address, out_address1=out_address + 'test.xml',
                          evalue=evalue, identity=identity)
    if r <= 1 and f <= 1:
        list_1.append([forward, reverse])
print('Useful primer pair(s) output: \n', list_1)
# output()
